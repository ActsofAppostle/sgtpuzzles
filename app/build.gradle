import org.apache.tools.ant.taskdefs.condition.Os

import java.text.SimpleDateFormat

apply plugin: 'com.android.model.application'

static def timestamp() {
    def dateFormat = new SimpleDateFormat("yyyy-MM-dd-HHmm")
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    return dateFormat.format(new Date())
}

def idForSimon() {
    try {
        def commit = new ByteArrayOutputStream()
        exec {
            // Require remote called simon because someone downstream might call my branch "upstream"
            commandLine 'git', 'merge-base', 'simon/master', 'master'
            standardOutput = commit
        }
        def shortUnique = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', commit.toString().trim()
            standardOutput = shortUnique
        }
        return shortUnique.toString().trim()
    } catch (ignored) {
        return "UNOFFICIAL"
    }
}

model {
    android {
        compileSdkVersion 25
        buildToolsVersion "25.0.2"

        defaultConfig {
            applicationId "name.boyle.chris.sgtpuzzles"
            versionCode 116
            versionName "${timestamp()}-${idForSimon()}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            minSdkVersion.apiLevel 9
            targetSdkVersion.apiLevel 25
            jackOptions {
                enabled true
            }

            fileTree(dir: 'src/main/jni', include: '*.c').each { File f ->
                def game = f.name.replace(".c", "")
                def text = f.text
                def match = text =~ /enum\s+\{\s*COL_[^,]+,\s*(COL_[^}]+)}/
                if (match) {
                    def colours = match.group(1).replaceAll(/(?s)\/\*.*?\*\//, "").replaceAll(/#[^\n]*\n/, "")
                            .trim().split(",")*.trim()*.replaceFirst(/^COL_/, "")*.toLowerCase()
                            .findAll { it =~ /^[^=]+$/ } - ["ncolours", "crossedline"]
                    if (colours.any { it =~ /[^a-z0-9_]/ }) {
                        throw new GradleException("Couldn't parse colours for " + game + ": " + match.group(1) + " -> " + colours)
                    }
                    resValues.with {
                        create() {
                            type = "string"
                            name = game + "_colours"
                            value = colours.join(',')
                        }
                    }
                    //println "\t<string translatable=\"false\" name=\"" + game + "_colours\">" + colours.join(',') + "</string>"
                }
            }
        }

        ndk {
            moduleName "puzzles"
            CFlags.addAll(["-DANDROID", "-DSMALL_SCREEN", "-DSTYLUS_BASED", "-DNO_PRINTING", "-DCOMBINED", "-DVIVID_COLOURS"])
            // WARNING abiFilters "all" here can end up omitting lib dir; I don't know why
            platformVersion "android-21"
        }

        buildTypes {
            debug {
                ndk {
                    debuggable = true
                }
            }
            release {
                minifyEnabled true
                ndk {
                    debuggable false
                }
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }
        compileOptions.with {
            targetCompatibility = JavaVersion.VERSION_1_8
            sourceCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

void buildExecutable(String abi, String debugOrRelease) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    def jniLibsDir = file('src/main/jniLibs/' + abi)
    def objFolder = file('build/intermediates/binaries/' + debugOrRelease + '/obj/' + abi)
    // library is built, now build the executables: copy libpuzzles aside...
    def prebuiltDir = file(objFolder.parent + '/prebuilt')
    def prebuiltAbiDir = file(prebuiltDir.absolutePath + '/' + abi)
    prebuiltAbiDir.mkdirs()
    def outDir = file(objFolder.parent + '/executables')
    def outAbiDir = file(outDir.absolutePath + '/' + abi)
    outAbiDir.mkdirs()
    copy {
        from(objFolder.absolutePath + '/libpuzzles.so')
        into prebuiltAbiDir
    }

    String abiParam = 'APP_ABI=' + abi

    // build the executables, with and without PIE
    //noinspection GroovyAssignabilityCheck
    def common = [
            ndkDir + (Os.isFamily(Os.FAMILY_WINDOWS) ? '/ndk-build.cmd' : '/ndk-build'),
            'NDK_PROJECT_PATH=null',
            'APP_BUILD_SCRIPT=' + file('src/main/executable.mk').absolutePath,
            'NDK_OUT=' + objFolder.absolutePath,
            'NDK_LIBS_OUT=' + outDir.absolutePath,
            'PUZZLES_PREBUILT_DIR=' + prebuiltDir.absolutePath,
            abiParam,
            'NDK_LOG=1',
            'NDK_DEBUG=' + (('debug' == debugOrRelease) ? '1' : '0')]
    exec {
        commandLine common + [
                'APP_PLATFORM=android-14',  // 14 is earliest supported
                'PUZZLESGEN_SUFFIX=-no-pie',
                'APP_PIE=false']
    }
    // rename to look like libraries, to get them installed
    copy {
        from(outAbiDir) {
            include 'puzzlesgen-no-pie'
            rename 'puzzlesgen-no-pie', 'libpuzzlesgen-no-pie.so'
        }
        into jniLibsDir
    }
    exec {
        commandLine common + [
                'APP_PLATFORM=android-16',  // earliest for PIE
                'PUZZLESGEN_SUFFIX=-with-pie',
                'APP_PIE=true']
    }
    // rename to look like libraries, to get them installed
    copy {
        from(outAbiDir) {
            include 'puzzlesgen-with-pie'
            rename 'puzzlesgen-with-pie', 'libpuzzlesgen-with-pie.so'
        }
        into jniLibsDir
    }
}

def ABIs = ["arm64-v8a", "armeabi-v7a", "x86", "x86_64"]

task buildGameGenerationExecutableDebug(dependsOn: ':app:assembleDependentsPuzzles') {
    doLast {
        for (String abi : ABIs) {
            buildExecutable(abi, "debug")
        }
    }
}
task buildGameGenerationExecutableRelease(dependsOn: ':app:assembleDependentsPuzzles') {
    doLast {
        for (String abi : ABIs) {
            buildExecutable(abi, "release")
        }
    }
}


dependencies {
    compile 'com.android.support:support-v4:25.4.0'
    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'com.android.support:gridlayout-v7:25.4.0'
    compile 'com.android.support:support-annotations:27.1.1'
    androidTestCompile 'com.android.support:support-annotations:27.1.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    //testCompile 'org.hamcrest:hamcrest-library:1.1'
    androidTestCompile 'com.android.support.test:runner:1.0.2'
    androidTestCompile 'com.android.support.test:rules:1.0.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:3.0.2'
}
